buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = 'me.ci'
archivesBaseName = modid

if (System.getenv("ENV_VERSION") != null) {
    version = "${minecraft_version}-${System.getenv("ENV_VERSION")}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(11)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "me.shedaniel"
        }
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:create-328085:${create_file_id}")
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel:${flywheel_version}")
    implementation fg.deobf("me.shedaniel:architectury-forge:${architectury_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

jar {
    manifest {
        attributes([
            'Specification-Title': modid,
            'Specification-Vendor': 'TheDudeFromCI',
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'TheDudeFromCI',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'MixinConfigs': "${modid}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

buildConfig {
    buildConfigField 'String', 'MODID', "\"${modid}\""
    buildConfigField 'String', 'VERSION', "\"${version}\""
}

artifacts {
    archives deobfJar
}


def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

build.dependsOn deobfJar
jar.dependsOn generateBuildConfig

jar.finalizedBy('reobfJar')
